services:
  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile.dev
    container_name: backend
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - JAVA_OPTS=-Duser.timezone=Asia/Seoul -XX:+UseContainerSupport -XX:MaxRAMPercentage=75.0
    volumes:
      - ../../backend:/home/gradle/project
      - ../../logs/dev:/logs
    networks:
      - app-network
      - monitoring-network
    command: ./gradlew bootRun --no-daemon $JAVA_OPTS
    restart: always
    depends_on:
      - db
      - processor
      - redis

  processor:
    build:
      context: ../../processor
      dockerfile: Dockerfile.dev
    container_name: processor
    ports:
      - "3001:3001"
    env_file:
      - .env
    environment:
      - CONSUMER_ID=processor-1
    volumes:
      - ../../logs/dev:/logs
    networks:
      - app-network
    command: ["node", "src/index.js"]
    restart: always

  db:
    image: mysql:8.0
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: streampulse
      TZ: Asia/Seoul
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - app-network
      - monitoring-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.4.3
    container_name: redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    command: [
      "redis-server",
      "--appendonly", "yes",
      "--appendfsync", "always",
      "--save", "900", "1",
      "--save", "300", "10",
      "--save", "60", "10000",
      "--requirepass", "${REDIS_PASSWORD}",
      "--rename-command", "FLUSHDB", "",
      "--rename-command", "FLUSHALL", ""
    ]
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    restart: always

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring-network
    restart: always

  grafana:
    image: grafana/grafana:9.5.2
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - monitoring-network
    volumes:
      - grafana-storage:/var/lib/grafana
    restart: always

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.2
    container_name: cadvisor
    ports:
      - "8081:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring-network
    restart: always

  loki:
    image: grafana/loki:2.9.1
    container_name: loki
    ports:
      - "3100:3100"
    networks:
      - monitoring-network
    restart: always

  promtail:
    image: grafana/promtail:2.9.1
    container_name: promtail
    volumes:
      - ../../logs/dev:/logs
      - ./promtail-config.yml:/etc/promtail/config.yml
    networks:
      - monitoring-network
    restart: always

  node-exporter:
    image: quay.io/prometheus/node-exporter:v1.6.1
    container_name: node-exporter
    ports:
      - "9100:9100"
    restart: always
    pid: "host"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
    networks:
      - monitoring-network

  mysqld-exporter:
    image: prom/mysqld-exporter:v0.14.0
    container_name: mysqld-exporter
    ports:
      - "9104:9104"
    env_file:
      - .env
    entrypoint: >
      sh -c "
        echo '[client]' > /tmp/.my.cnf && \
        echo 'user=$${DB_USER}' >> /tmp/.my.cnf && \
        echo 'password=$${DB_PASSWORD}' >> /tmp/.my.cnf && \
        echo 'host=$${DB_HOST}' >> /tmp/.my.cnf && \
        echo 'database=$${DB_NAME}' >> /tmp/.my.cnf && \
        /bin/mysqld_exporter --config.my-cnf=/tmp/.my.cnf
      "
    networks:
      - monitoring-network
      - app-network
    restart: always

  redis-exporter:
    image: bitnami/redis-exporter:1.52.0
    container_name: redis-exporter
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - monitoring-network
    restart: always

networks:
  app-network:
    driver: bridge
  monitoring-network:
    driver: bridge

volumes:
  mysql-data:
  grafana-storage:
  redis-data:
